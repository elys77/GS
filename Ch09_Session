using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Threading.Tasks;

namespace Ch02_Main
{
    public abstract class Ch09_Session
    {
        Socket _socket;
        int _disconnected = 0;
        SocketAsyncEventArgs _sendArgs = new SocketAsyncEventArgs();
        SocketAsyncEventArgs _recvArgs = new SocketAsyncEventArgs();
        Queue<byte[]> _sendQueue = new Queue<byte[]>();
        object _lock = new object();
        List<ArraySegment<byte>> _pendingList = new List<ArraySegment<byte>>();

        public abstract void OnConnected(EndPoint endPoint); // 애를 언제 해야할까? Listener에서 함
        public abstract void OnRecv(ArraySegment<byte> buffer);
        public abstract void OnSend(int numOfBytes);
        public abstract void OnDisconnected(EndPoint endPoint);

        public void Start(Socket socket)
        {
            _socket = socket;

            _recvArgs.Completed += new EventHandler<SocketAsyncEventArgs>(OnRecvCompleted);
            _recvArgs.SetBuffer(new byte[1024], 0, 1024);
            // 초기에 빈 버퍼로 연결, 클라에서 온 정보가 버퍼에 저장

            _sendArgs.Completed += new EventHandler<SocketAsyncEventArgs>(OnSendCompleted);

            RegisterRecv(_recvArgs);
        }

        public void Send(byte[] sendBuffer) // "패킷"이라는 것을 만들어서 하는 것이 좋음
        {
            lock (_lock)
            {
                _sendQueue.Enqueue(sendBuffer);
                if (_pendingList.Count == 0) // 대기 중인 애가 한 명도 없음
                {
                    RegisterSend(); // 이 부분 최적화 가능
                }
            }
        }
        // > 서버 엔진단에서가 아니라 컨텐츠 단에서 모든 행위를 모아서 보내는 것이 더 좋음

        void RegisterSend()
        {
            // 아무 버퍼가 아니라 실제로 보낼 데이터가 있는 버퍼와 초기위치, 길이를 보냄
            //_sendArgs.BufferList // 여기에 버퍼를 쭉 연결하고, SendAsync를 하면 쫙 보내줌

            //
            _pendingList.Clear(); // 전역이므로 초기화, OnCompleted에서 해주므로 굳이 없어도 됨
            while (_sendQueue.Count > 0)
            {
                byte[] buff = _sendQueue.Dequeue();
                //_sendArgs.BufferList.Add(buff, 0, buff.Length); // 이거 안됨
                _pendingList.Add(new ArraySegment<byte>(buff, 0, buff.Length));
                // ArraySegment: 배열의 일부, struct(스택에 할당)
            }

            _sendArgs.BufferList = _pendingList;

            bool pending = _socket.SendAsync(_sendArgs);
            if (pending == false)
                OnSendCompleted(null, _sendArgs);
        }

        void OnSendCompleted(object sender, SocketAsyncEventArgs args)
        {
            lock (_lock) // RegisterSend로 불리면 없어도 되는데, 그냥 Event로 불리면 필요함
            {
                if (args.BytesTransferred > 0 && args.SocketError == SocketError.Success)
                {
                    try
                    {
                        _sendArgs.BufferList = null;
                        _pendingList.Clear();

                        OnSend(_sendArgs.BytesTransferred);

                        if (_sendQueue.Count > 0) // 또 누군가가 넣어놓았을때
                        {
                            RegisterSend(); // 쌓인 것을 처리
                        }
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"OnSendCompleted Failed {ex}");
                    }
                }
                else
                {
                    Disconnect();
                }
            }
        }

        public void Disconnect()
        {
            if (Interlocked.Exchange(ref _disconnected, 1) == 1) // Disconnect 중복 방지
                return;

            OnDisconnected(_socket.RemoteEndPoint);
            _socket.Shutdown(SocketShutdown.Both);
            _socket.Close();
        }

        void RegisterRecv(SocketAsyncEventArgs args)
        {
            bool pending = _socket.ReceiveAsync(args);
            if (pending == false)
                OnRecvCompleted(null, args);
        }

        void OnRecvCompleted(object sender, SocketAsyncEventArgs args)
        {
            if (args.BytesTransferred > 0 && args.SocketError == SocketError.Success) // 몇바이트를 받앗는가?
            {
                try
                {
                    OnRecv(new ArraySegment<byte>(args.Buffer, args.Offset, args.BytesTransferred));
                    RegisterRecv(args);
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"OnRecvCompleted Failed {ex}");
                }
            }
            else
            {
                Disconnect();
            }
        }
    }
}
